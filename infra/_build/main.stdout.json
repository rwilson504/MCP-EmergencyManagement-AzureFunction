{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "15814086938948579890"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "australiaeast",
        "eastasia",
        "eastus",
        "eastus2",
        "northeurope",
        "southcentralus",
        "southeastasia",
        "swedencentral",
        "uksouth",
        "westus2",
        "eastus2euap"
      ],
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Primary location for all resources"
      },
      "minLength": 1
    },
    "vnetEnabled": {
      "type": "bool",
      "defaultValue": false
    },
    "apiServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "apiUserAssignedIdentityName": {
      "type": "string",
      "defaultValue": ""
    },
    "applicationInsightsName": {
      "type": "string",
      "defaultValue": ""
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "webAppServicePlanName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional dedicated App Service Plan name for the web frontend (if empty a name will be generated)."
      }
    },
    "logAnalyticsName": {
      "type": "string",
      "defaultValue": ""
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "vNetName": {
      "type": "string",
      "defaultValue": ""
    },
    "disableLocalAuth": {
      "type": "bool",
      "defaultValue": true
    },
    "mapsAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure Maps account name (must be globally unique in subscription)"
      }
    },
    "mapsSku": {
      "type": "string",
      "defaultValue": "G2",
      "allowedValues": [
        "G2"
      ],
      "metadata": {
        "description": "Azure Maps SKU"
      }
    },
    "geoCacheContainerName": {
      "type": "string",
      "defaultValue": "routing-cache",
      "metadata": {
        "description": "Geo cache container name"
      }
    },
    "webAppName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Web App name (must be globally unique)"
      }
    },
    "linuxFxVersion": {
      "type": "string",
      "defaultValue": "NODE|22-lts",
      "metadata": {
        "description": "Runtime stack for the web app (Node LTS)"
      }
    },
    "templateRevision": {
      "type": "string",
      "defaultValue": "2025-09-10.1",
      "metadata": {
        "description": "Revision marker for infrastructure template; bump to force re-provision of otherwise unchanged resources."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "tags": {
      "azd-env-name": "[parameters('environmentName')]",
      "template-revision": "[parameters('templateRevision')]"
    },
    "functionAppName": "[if(not(empty(parameters('apiServiceName'))), parameters('apiServiceName'), format('doem-{0}api-{1}', variables('abbrs').webSitesFunctions, variables('resourceToken')))]",
    "deploymentStorageContainerName": "[format('app-package-{0}-{1}', take(variables('functionAppName'), 32), take(toLower(uniqueString(variables('functionAppName'), variables('resourceToken'))), 7))]",
    "finalWebAppName": "[if(not(empty(parameters('webAppName'))), parameters('webAppName'), format('doem-{0}{1}', variables('abbrs').webSitesAppService, variables('resourceToken')))]",
    "vNetResolvedName": "[if(not(empty(parameters('vNetName'))), parameters('vNetName'), format('doem-{0}{1}', variables('abbrs').networkVirtualNetworks, variables('resourceToken')))]",
    "safeAppSubnetId": "[if(parameters('vnetEnabled'), format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworks/{2}/subnets/app', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), variables('vNetResolvedName')), '')]",
    "safePrivateEndpointSubnetName": "[if(parameters('vnetEnabled'), 'private-endpoints-subnet', '')]",
    "finalMapsAccountName": "[if(not(empty(parameters('mapsAccountName'))), parameters('mapsAccountName'), format('doem-maps-{0}', variables('resourceToken')))]",
    "StorageBlobDataOwner": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
    "StorageQueueDataContributor": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
    "monitoringRoleDefinitionId": "3913510d-42f4-4e42-8a64-420c390055eb",
    "mapsDataReaderRoleDefinitionId": "423170ca-a8f6-4b0f-8487-9e4eb8f49bfa"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "apiUserAssignedIdentity",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "identityName": "[if(not(empty(parameters('apiUserAssignedIdentityName'))), createObject('value', parameters('apiUserAssignedIdentityName')), createObject('value', format('doem-{0}api-{1}', variables('abbrs').managedIdentityUserAssignedIdentities, variables('resourceToken'))))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16238697030842111832"
            }
          },
          "parameters": {
            "identityName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-07-31-preview",
              "name": "[parameters('identityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "identityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            },
            "identityName": {
              "type": "string",
              "value": "[parameters('identityName')]"
            },
            "identityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-07-31-preview').principalId]"
            },
            "identityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-07-31-preview').clientId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appserviceplan",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('appServicePlanName'))), createObject('value', parameters('appServicePlanName')), createObject('value', format('doem-{0}{1}', variables('abbrs').webServerFarms, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "FC1",
              "tier": "FlexConsumption"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11081889152627821586"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "kind": {
              "type": "string",
              "defaultValue": ""
            },
            "reserved": {
              "type": "bool",
              "defaultValue": true
            },
            "sku": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "reserved": "[parameters('reserved')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "webappserviceplan",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('webAppServicePlanName'))), createObject('value', parameters('webAppServicePlanName')), createObject('value', format('doem-{0}web-{1}', variables('abbrs').webServerFarms, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "B1",
              "tier": "Basic"
            }
          },
          "kind": {
            "value": "linux"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11081889152627821586"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "kind": {
              "type": "string",
              "defaultValue": ""
            },
            "reserved": {
              "type": "bool",
              "defaultValue": true
            },
            "sku": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "reserved": "[parameters('reserved')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "condition": "[parameters('vnetEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "serviceVirtualNetwork",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "vNetName": "[if(not(empty(parameters('vNetName'))), createObject('value', parameters('vNetName')), createObject('value', format('doem-{0}{1}', variables('abbrs').networkVirtualNetworks, variables('resourceToken'))))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9465268734579688490"
            }
          },
          "parameters": {
            "vNetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the virtual network."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location."
              }
            },
            "peSubnetName": {
              "type": "string",
              "defaultValue": "private-endpoints-subnet",
              "metadata": {
                "description": "Specifies the name of the subnet for the Service Bus private endpoint."
              }
            },
            "appSubnetName": {
              "type": "string",
              "defaultValue": "app",
              "metadata": {
                "description": "Specifies the name of the subnet for Function App virtual network integration."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-05-01",
              "name": "[parameters('vNetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "encryption": {
                  "enabled": false,
                  "enforcement": "AllowUnencrypted"
                },
                "subnets": [
                  {
                    "name": "[parameters('peSubnetName')]",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), 'private-endpoints-subnet')]",
                    "properties": {
                      "addressPrefixes": [
                        "10.0.1.0/24"
                      ],
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                  },
                  {
                    "name": "[parameters('appSubnetName')]",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), 'app')]",
                    "properties": {
                      "addressPrefixes": [
                        "10.0.2.0/24"
                      ],
                      "delegations": [
                        {
                          "name": "delegation",
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('vNetName'), 'app', 'delegation')]",
                          "properties": {
                            "serviceName": "Microsoft.App/environments"
                          },
                          "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                  }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false
              }
            }
          ],
          "outputs": {
            "peSubnetName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName')), '2023-05-01').subnets[0].name]"
            },
            "peSubnetID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName')), '2023-05-01').subnets[0].id]"
            },
            "appSubnetName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName')), '2023-05-01').subnets[1].name]"
            },
            "appSubnetID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName')), '2023-05-01').subnets[1].id]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "maps",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('finalMapsAccountName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "[parameters('mapsSku')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12612804381646205852"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "sku": {
              "type": "string",
              "defaultValue": "G2"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Maps/accounts",
              "apiVersion": "2023-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "disableLocalAuth": true
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Maps/accounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "clientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Maps/accounts', parameters('name')), '2023-06-01').uniqueId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "api",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('functionAppName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "applicationInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.applicationInsightsName.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "runtimeName": {
            "value": "dotnet-isolated"
          },
          "runtimeVersion": {
            "value": "8.0"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
          },
          "deploymentStorageContainerName": {
            "value": "[variables('deploymentStorageContainerName')]"
          },
          "identityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityId.value]"
          },
          "identityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityClientId.value]"
          },
          "additionalCorsOrigins": {
            "value": [
              "[format('https://{0}.azurewebsites.net', if(not(empty(parameters('webAppName'))), parameters('webAppName'), variables('finalWebAppName')))]"
            ]
          },
          "appSettings": {
            "value": {
              "Storage__BlobServiceUrl": "[format('https://{0}.blob.{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value, environment().suffixes.storage)]",
              "Storage__CacheContainer": "[parameters('geoCacheContainerName')]",
              "Fires__ArcGisFeatureUrl": "https://services3.arcgis.com/T4QMspbfLg3qTGWY/ArcGIS/rest/services/WFIGS_Interagency_Perimeters_YearToDate/FeatureServer/0/query",
              "Maps__RouteBase": "https://atlas.microsoft.com",
              "Maps__SearchBase": "https://atlas.microsoft.com",
              "Maps__ClientId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'maps'), '2022-09-01').outputs.clientId.value]",
              "ManagedIdentity__ClientId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityClientId.value]",
              "RouteLinks__BaseUrl": "[format('https://{0}.azurewebsites.net', if(not(empty(parameters('webAppName'))), parameters('webAppName'), variables('finalWebAppName')))]"
            }
          },
          "virtualNetworkSubnetId": {
            "value": "[variables('safeAppSubnetId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3145650025885757678"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "appServicePlanId": {
              "type": "string"
            },
            "appSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "runtimeName": {
              "type": "string"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "api"
            },
            "storageAccountName": {
              "type": "string"
            },
            "deploymentStorageContainerName": {
              "type": "string"
            },
            "virtualNetworkSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "instanceMemoryMB": {
              "type": "int",
              "defaultValue": 2048
            },
            "maximumInstanceCount": {
              "type": "int",
              "defaultValue": 100
            },
            "identityId": {
              "type": "string",
              "defaultValue": ""
            },
            "identityClientId": {
              "type": "string",
              "defaultValue": ""
            },
            "additionalCorsOrigins": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Additional CORS origins (e.g., web app URL)"
              }
            }
          },
          "variables": {
            "applicationInsightsIdentity": "[format('ClientId={0};Authorization=AAD', parameters('identityClientId'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-functions-module', parameters('serviceName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]"
                  },
                  "identityType": {
                    "value": "UserAssigned"
                  },
                  "identityId": {
                    "value": "[parameters('identityId')]"
                  },
                  "appSettings": {
                    "value": "[union(parameters('appSettings'), createObject('AzureWebJobsStorage__clientId', parameters('identityClientId'), 'APPLICATIONINSIGHTS_AUTHENTICATION_STRING', variables('applicationInsightsIdentity')))]"
                  },
                  "applicationInsightsName": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "appServicePlanId": {
                    "value": "[parameters('appServicePlanId')]"
                  },
                  "runtimeName": {
                    "value": "[parameters('runtimeName')]"
                  },
                  "runtimeVersion": {
                    "value": "[parameters('runtimeVersion')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "deploymentStorageContainerName": {
                    "value": "[parameters('deploymentStorageContainerName')]"
                  },
                  "virtualNetworkSubnetId": {
                    "value": "[parameters('virtualNetworkSubnetId')]"
                  },
                  "instanceMemoryMB": {
                    "value": "[parameters('instanceMemoryMB')]"
                  },
                  "maximumInstanceCount": {
                    "value": "[parameters('maximumInstanceCount')]"
                  },
                  "additionalCorsOrigins": {
                    "value": "[parameters('additionalCorsOrigins')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11724419023972648476"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "appServicePlanId": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "virtualNetworkSubnetId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "identityType": {
                      "type": "string",
                      "allowedValues": [
                        "SystemAssigned",
                        "UserAssigned"
                      ]
                    },
                    "identityId": {
                      "type": "string",
                      "metadata": {
                        "description": "User assigned identity name"
                      }
                    },
                    "runtimeName": {
                      "type": "string",
                      "allowedValues": [
                        "dotnet-isolated",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        "custom"
                      ]
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "allowedValues": [
                        "3.10",
                        "3.11",
                        "7.4",
                        "8.0",
                        "10",
                        "11",
                        "17",
                        "20"
                      ]
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "functionapp,linux"
                    },
                    "appSettings": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "instanceMemoryMB": {
                      "type": "int",
                      "defaultValue": 2048
                    },
                    "maximumInstanceCount": {
                      "type": "int",
                      "defaultValue": 100
                    },
                    "deploymentStorageContainerName": {
                      "type": "string"
                    },
                    "additionalCorsOrigins": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Additional allowed origins for CORS (e.g., web app domain)"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2023-12-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
                      "properties": "[union(parameters('appSettings'), createObject('AzureWebJobsStorage__accountName', parameters('storageAccountName'), 'AzureWebJobsStorage__credential', 'managedidentity', 'APPLICATIONINSIGHTS_CONNECTION_STRING', reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2023-12-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'web')]",
                      "properties": {
                        "cors": {
                          "allowedOrigins": "[union(createArray('http://localhost:3000', 'https://localhost:3000'), parameters('additionalCorsOrigins'))]",
                          "supportCredentials": true
                        },
                        "use32BitWorkerProcess": false,
                        "ftpsState": "Disabled"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2023-12-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "identity": {
                        "type": "[parameters('identityType')]",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('identityId'))]": {}
                        }
                      },
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "functionAppConfig": {
                          "deployment": {
                            "storage": {
                              "type": "blobContainer",
                              "value": "[format('{0}{1}', reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.blob, parameters('deploymentStorageContainerName'))]",
                              "authentication": {
                                "type": "[if(equals(parameters('identityType'), 'SystemAssigned'), 'SystemAssignedIdentity', 'UserAssignedIdentity')]",
                                "userAssignedIdentityResourceId": "[if(equals(parameters('identityType'), 'UserAssigned'), parameters('identityId'), '')]"
                              }
                            }
                          },
                          "scaleAndConcurrency": {
                            "instanceMemoryMB": "[parameters('instanceMemoryMB')]",
                            "maximumInstanceCount": "[parameters('maximumInstanceCount')]"
                          },
                          "runtime": {
                            "name": "[parameters('runtimeName')]",
                            "version": "[parameters('runtimeVersion')]"
                          }
                        },
                        "virtualNetworkSubnetId": "[if(not(empty(parameters('virtualNetworkSubnetId'))), parameters('virtualNetworkSubnetId'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2023-12-01').defaultHostName)]"
                    },
                    "identityPrincipalId": {
                      "type": "string",
                      "value": "[if(equals(parameters('identityType'), 'SystemAssigned'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2023-12-01', 'full').identity.principalId, '')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "SERVICE_API_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-functions-module', parameters('serviceName'))), '2022-09-01').outputs.name.value]"
            },
            "SERVICE_API_IDENTITY_PRINCIPAL_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-functions-module', parameters('serviceName'))), '2022-09-01').outputs.identityPrincipalId.value]"
            },
            "SERVICE_API_RESOURCE_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-functions-module', parameters('serviceName'))), '2022-09-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'appserviceplan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'maps')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "webapp",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('finalWebAppName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webappserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "linuxFxVersion": {
            "value": "[parameters('linuxFxVersion')]"
          },
          "serviceName": {
            "value": "web"
          },
          "applicationInsightsConnectionString": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          },
          "userAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityId.value]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityClientId.value]"
          },
          "apiBaseUrl": {
            "value": "[format('https://{0}.azurewebsites.net/api', variables('functionAppName'))]"
          },
          "azureMapsClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'maps'), '2022-09-01').outputs.clientId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "13170648549857784847"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Web App"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for the Web App"
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan ID"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Web App"
              }
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "NODE|22-lts",
              "metadata": {
                "description": "Runtime stack for the web app"
              }
            },
            "nodeVersion": {
              "type": "string",
              "defaultValue": "22.11.0",
              "metadata": {
                "description": "Node.js version used for App Service environment (WEBSITE_NODE_DEFAULT_VERSION / APP_NODE_VERSION)."
              }
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "web",
              "metadata": {
                "description": "Service name for AZD tagging"
              }
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional Application Insights connection string to enable client/server telemetry correlation."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional Log Analytics Workspace Resource ID to send platform & application logs."
              }
            },
            "userAssignedIdentityId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional user-assigned managed identity resource ID to attach to the Web App."
              }
            },
            "userAssignedIdentityClientId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional user-assigned managed identity client ID (exposed to runtime as AZURE_CLIENT_ID for DefaultAzureCredential)."
              }
            },
            "apiBaseUrl": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional public API base URL (e.g., Function App endpoint) to expose to the SPA at runtime."
              }
            },
            "azureMapsClientId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional Azure Maps Client ID for map rendering."
              }
            },
            "appSettingsRevision": {
              "type": "string",
              "defaultValue": "2025-09-10.1",
              "metadata": {
                "description": "Revision marker to force app settings redeployment when incremented."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]",
              "kind": "app,linux",
              "identity": "[if(not(empty(parameters('userAssignedIdentityId'))), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userAssignedIdentityId')), createObject())), null())]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "ftpsState": "FtpsOnly",
                  "minTlsVersion": "1.2",
                  "scmMinTlsVersion": "1.2",
                  "use32BitWorkerProcess": false,
                  "webSocketsEnabled": false,
                  "managedPipelineMode": "Integrated",
                  "appCommandLine": "npm start",
                  "defaultDocuments": [
                    "index.html"
                  ]
                },
                "httpsOnly": true,
                "clientAffinityEnabled": false
              }
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2023-12-01",
              "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
              "properties": {
                "WEBSITE_NODE_DEFAULT_VERSION": "[parameters('nodeVersion')]",
                "APP_NODE_VERSION": "[parameters('nodeVersion')]",
                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[parameters('applicationInsightsConnectionString')]",
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(empty(parameters('applicationInsightsConnectionString')), '', split(split(parameters('applicationInsightsConnectionString'), ';')[0], '=')[1])]",
                "SCM_DO_BUILD_DURING_DEPLOYMENT": "true",
                "ENABLE_ORYX_BUILD": "true",
                "BUILD_FLAGS": "UseAppServiceBuild=true",
                "PROJECT": "web",
                "API_BASE_URL": "[parameters('apiBaseUrl')]",
                "AZURE_CLIENT_ID": "[parameters('userAssignedIdentityClientId')]",
                "AZURE_MAPS_CLIENT_ID": "[parameters('azureMapsClientId')]",
                "APP_SETTINGS_REVISION": "[parameters('appSettingsRevision')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "webapp-logs",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "AppServiceHTTPLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "AppServiceConsoleLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "AppServiceAppLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "AppServicePlatformLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "AppServiceIPSecAuditLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "AppServiceAuditLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "webAppName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "defaultHostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2023-12-01').defaultHostName]"
            },
            "webAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2023-12-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'maps')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webappserviceplan')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "webapp-container-logging",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "webAppName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webapp'), '2022-09-01').outputs.webAppName.value]"
          },
          "resourceGroupName": {
            "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          },
          "enableContainerLogging": {
            "value": true
          },
          "logLevel": {
            "value": "Verbose"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8160049469983820822"
            }
          },
          "parameters": {
            "webAppName": {
              "type": "string",
              "metadata": {
                "description": "The name of the web app to configure container logging for"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group where the web app is located"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The Log Analytics workspace ID to send container logs to"
              }
            },
            "enableContainerLogging": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable container logging"
              }
            },
            "logLevel": {
              "type": "string",
              "defaultValue": "Verbose",
              "allowedValues": [
                "Error",
                "Warning",
                "Info",
                "Verbose"
              ],
              "metadata": {
                "description": "Container logging level"
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('enableContainerLogging')]",
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2023-12-01",
              "name": "[format('{0}/{1}', parameters('webAppName'), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "fileSystem": {
                    "level": "[parameters('logLevel')]"
                  },
                  "azureBlobStorage": {
                    "level": "Off"
                  }
                },
                "httpLogs": {
                  "fileSystem": {
                    "retentionInMb": 35,
                    "retentionInDays": 7,
                    "enabled": true
                  }
                },
                "failedRequestsTracing": {
                  "enabled": true
                },
                "detailedErrorMessages": {
                  "enabled": true
                }
              }
            },
            {
              "condition": "[parameters('enableContainerLogging')]",
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2023-12-01",
              "name": "[format('{0}/{1}', parameters('webAppName'), 'appsettings')]",
              "properties": {
                "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "true",
                "DOCKER_ENABLE_CI": "true",
                "WEBSITES_CONTAINER_START_TIME_LIMIT": "1800"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites/config', parameters('webAppName'), 'logs')]"
              ]
            }
          ],
          "outputs": {
            "containerLoggingEnabled": {
              "type": "bool",
              "value": "[parameters('enableContainerLogging')]"
            },
            "logLevel": {
              "type": "string",
              "value": "[parameters('logLevel')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webapp')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('storageAccountName'))), createObject('value', parameters('storageAccountName')), createObject('value', format('doem{0}{1}', variables('abbrs').storageStorageAccounts, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containers": {
            "value": [
              {
                "name": "[variables('deploymentStorageContainerName')]"
              },
              {
                "name": "snippets"
              },
              {
                "name": "[parameters('geoCacheContainerName')]"
              },
              {
                "name": "links"
              }
            ]
          },
          "publicNetworkAccess": "[if(parameters('vnetEnabled'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "networkAcls": "[if(not(parameters('vnetEnabled')), createObject('value', createObject()), createObject('value', createObject('defaultAction', 'Deny')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8758117216582193775"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2"
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Standard_LRS"
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {
                "bypass": "AzureServices",
                "defaultAction": "Allow"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "storage::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[not(empty(parameters('containers')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'publicAccess'), 'None')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('name'), 'default')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('containers')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "allowSharedKeyAccess": false,
                "networkAcls": "[parameters('networkAcls')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2023-01-01').primaryEndpoints]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "blobRoleAssignmentapi",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
          },
          "roleDefinitionID": {
            "value": "[variables('StorageBlobDataOwner')]"
          },
          "principalID": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16516391759568044709"
            }
          },
          "parameters": {
            "principalID": {
              "type": "string"
            },
            "roleDefinitionID": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionID'))]",
                "principalId": "[parameters('principalID')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "ROLE_ASSIGNMENT_NAME": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "queueRoleAssignmentapi",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
          },
          "roleDefinitionID": {
            "value": "[variables('StorageQueueDataContributor')]"
          },
          "principalID": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16516391759568044709"
            }
          },
          "parameters": {
            "principalID": {
              "type": "string"
            },
            "roleDefinitionID": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionID'))]",
                "principalId": "[parameters('principalID')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "ROLE_ASSIGNMENT_NAME": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "condition": "[parameters('vnetEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "servicePrivateEndpoint",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": "[if(not(empty(parameters('vNetName'))), createObject('value', parameters('vNetName')), createObject('value', format('doem-{0}{1}', variables('abbrs').networkVirtualNetworks, variables('resourceToken'))))]",
          "subnetName": {
            "value": "[variables('safePrivateEndpointSubnetName')]"
          },
          "resourceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5827610572748205473"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the virtual network."
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the subnet which contains the virtual machine."
              }
            },
            "resourceName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the resource name of the Storage resource with an endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "blobPrivateDNSZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
            "blobPrivateDnsZoneVirtualNetworkLinkName": "[format('{0}-blob-link-{1}', parameters('resourceName'), take(toLower(uniqueString(parameters('resourceName'), parameters('virtualNetworkName'))), 4))]",
            "queuePrivateDNSZoneName": "[format('privatelink.queue.{0}', environment().suffixes.storage)]",
            "queuePrivateDnsZoneVirtualNetworkLinkName": "[format('{0}-queue-link-{1}', parameters('resourceName'), take(toLower(uniqueString(parameters('resourceName'), parameters('virtualNetworkName'))), 4))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('blobPrivateDNSZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('queuePrivateDNSZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('blobPrivateDNSZoneName'), variables('blobPrivateDnsZoneVirtualNetworkLinkName'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('blobPrivateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('queuePrivateDNSZoneName'), variables('queuePrivateDnsZoneVirtualNetworkLinkName'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('queuePrivateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-08-01",
              "name": "blob-private-endpoint",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "blobPrivateLinkConnection",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('resourceName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', 'blob-private-endpoint', 'blobPrivateDnsZoneGroup')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "storageBlobARecord",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('blobPrivateDNSZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('blobPrivateDNSZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', 'blob-private-endpoint')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-08-01",
              "name": "queue-private-endpoint",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "queuePrivateLinkConnection",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('resourceName'))]",
                      "groupIds": [
                        "queue"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', 'queue-private-endpoint', 'queuePrivateDnsZoneGroup')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "storageQueueARecord",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('queuePrivateDNSZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('queuePrivateDNSZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', 'queue-private-endpoint')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "monitoring",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "logAnalyticsName": "[if(not(empty(parameters('logAnalyticsName'))), createObject('value', parameters('logAnalyticsName')), createObject('value', format('doem-{0}{1}', variables('abbrs').operationalInsightsWorkspaces, variables('resourceToken'))))]",
          "applicationInsightsName": "[if(not(empty(parameters('applicationInsightsName'))), createObject('value', parameters('applicationInsightsName')), createObject('value', format('doem-{0}{1}', variables('abbrs').insightsComponents, variables('resourceToken'))))]",
          "disableLocalAuth": {
            "value": "[parameters('disableLocalAuth')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6630849561358213764"
            }
          },
          "parameters": {
            "logAnalyticsName": {
              "type": "string"
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "loganalytics",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('logAnalyticsName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11362705159639911849"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-12-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "retentionInDays": 30,
                        "features": {
                          "searchVersion": 1
                        },
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "applicationinsights",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'loganalytics'), '2022-09-01').outputs.id.value]"
                  },
                  "disableLocalAuth": {
                    "value": "[parameters('disableLocalAuth')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "4451363344472189653"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "disableLocalAuth": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "web",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "DisableLocalAuth": "[parameters('disableLocalAuth')]"
                      }
                    }
                  ],
                  "outputs": {
                    "connectionString": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                    },
                    "instrumentationKey": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'loganalytics')]"
              ]
            }
          ],
          "outputs": {
            "applicationInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'applicationinsights'), '2022-09-01').outputs.connectionString.value]"
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'applicationinsights'), '2022-09-01').outputs.instrumentationKey.value]"
            },
            "applicationInsightsName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'applicationinsights'), '2022-09-01').outputs.name.value]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'loganalytics'), '2022-09-01').outputs.id.value]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'loganalytics'), '2022-09-01').outputs.name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appInsightsRoleAssignmentapi",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.applicationInsightsName.value]"
          },
          "roleDefinitionID": {
            "value": "[variables('monitoringRoleDefinitionId')]"
          },
          "principalID": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9359718882312745979"
            }
          },
          "parameters": {
            "principalID": {
              "type": "string"
            },
            "roleDefinitionID": {
              "type": "string"
            },
            "appInsightsName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), parameters('principalID'), parameters('roleDefinitionID'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionID'))]",
                "principalId": "[parameters('principalID')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "ROLE_ASSIGNMENT_NAME": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), parameters('principalID'), parameters('roleDefinitionID'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "mapsRoleAssignmentapi",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "mapsAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'maps'), '2022-09-01').outputs.name.value]"
          },
          "roleDefinitionID": {
            "value": "[variables('mapsDataReaderRoleDefinitionId')]"
          },
          "principalID": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1930591821576442794"
            }
          },
          "parameters": {
            "principalID": {
              "type": "string"
            },
            "roleDefinitionID": {
              "type": "string"
            },
            "mapsAccountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Maps/accounts/{0}', parameters('mapsAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Maps/accounts', parameters('mapsAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionID'))]",
                "principalId": "[parameters('principalID')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "ROLE_ASSIGNMENT_NAME": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Maps/accounts', parameters('mapsAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'apiUserAssignedIdentity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'maps')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    }
  ],
  "outputs": {
    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "SERVICE_API_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'api'), '2022-09-01').outputs.SERVICE_API_NAME.value]"
    },
    "AZURE_FUNCTION_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'api'), '2022-09-01').outputs.SERVICE_API_NAME.value]"
    },
    "AZURE_MAPS_ACCOUNT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'maps'), '2022-09-01').outputs.name.value]"
    },
    "GEO_CACHE_CONTAINER_URI": {
      "type": "string",
      "value": "[format('https://{0}.blob.{1}/{2}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value, environment().suffixes.storage, parameters('geoCacheContainerName'))]"
    },
    "WEB_APP_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webapp'), '2022-09-01').outputs.webAppName.value]"
    },
    "WEB_APP_URL": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webapp'), '2022-09-01').outputs.webAppUrl.value]"
    },
    "SERVICE_WEB_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webapp'), '2022-09-01').outputs.webAppName.value]"
    },
    "SERVICE_WEB_URL": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webapp'), '2022-09-01').outputs.webAppUrl.value]"
    },
    "SERVICE_WEB_HOSTNAME": {
      "type": "string",
      "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('doem-{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'webapp'), '2022-09-01').outputs.webAppUrl.value, 'https://', '')]"
    },
    "TEMPLATE_REVISION": {
      "type": "string",
      "value": "[parameters('templateRevision')]"
    }
  }
}

